// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract DegenToken is ERC20, Ownable {

    mapping(uint256 => uint256) public leagueTokens;

   constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        leagueTokens[1] = 10000;
        leagueTokens[2] = 8000;
        leagueTokens[3] = 7000;
        leagueTokens[4] = 5000;
        leagueTokens[5] = 3000;
        leagueTokens[6] = 1000;
    }

    function mintToken(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
    }

    function burnToken(uint256 _amount) public {
        require(balanceOf(msg.sender) >= _amount, "Burn Failed: Insufficient Tokens.");
        approve(msg.sender, _amount);
        _burn(msg.sender, _amount);
    }

    function redeemItems(uint256 _item) public {
        require(_item <= 6, "Item is not available.");
        require(balanceOf(msg.sender) >= leagueTokens[_item], "Redeem Failed: You Have Insufficient League Tokens.");
        transfer(owner(), leagueTokens[_item]);
    }

     function getBalance() external view returns (uint256) {
        return this.balanceOf(msg.sender);
    }
     
    function degenItems() external pure returns (string memory) {
        string memory obtainableItems = "Obtainable Items: {1} Degen Challenger Frame (10000) {2} Degen Grand Master Frame (8000) {3}  Degen Master Frame (7000) {4}  Degen Diamond Frame (5000) {5}  Degen Exclusive Icon (3000) {6}  Victorious Degen Skin(1000)";
        return obtainableItems;
    }

}
